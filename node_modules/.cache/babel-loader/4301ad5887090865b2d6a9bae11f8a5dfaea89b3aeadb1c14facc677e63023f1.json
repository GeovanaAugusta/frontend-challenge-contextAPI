{"ast":null,"code":"var _jsxFileName = \"/home/ge/frontend-challenge-contextAPI/src/utils/locales/LanguageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { setLanguage, translate } from './i18n';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext(undefined);\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLang] = useState('en');\n  const changeLanguage = lang => {\n    setLang(lang);\n    setLanguage(lang);\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: {\n      language,\n      changeLanguage,\n      translate\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(LanguageProvider, \"b2kVo22sYyv64ADqZiTcaJf18zs=\");\n_c = LanguageProvider;\nexport const useLanguage = () => {\n  _s2();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n_s2(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","setLanguage","translate","jsxDEV","_jsxDEV","LanguageContext","undefined","LanguageProvider","children","_s","language","setLang","changeLanguage","lang","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLanguage","_s2","context","Error","$RefreshReg$"],"sources":["/home/ge/frontend-challenge-contextAPI/src/utils/locales/LanguageContext.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, ReactNode } from 'react';\nimport { setLanguage, translate } from './i18n';\n\ninterface LanguageContextType {\n  language: string;\n  changeLanguage: (lang: string) => void;\n  translate: (key: string) => string;\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined);\n\ninterface LanguageProviderProps {\n  children: ReactNode;\n}\n\nexport const LanguageProvider: React.FC<LanguageProviderProps> = ({ children }) => {\n  const [language, setLang] = useState<string>('en');\n\n  const changeLanguage = (lang: string) => {\n    setLang(lang);\n    setLanguage(lang);\n  };\n\n  return (\n    <LanguageContext.Provider value={{ language, changeLanguage, translate }}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};\n\nexport const useLanguage = (): LanguageContextType => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within a LanguageProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,QAAmB,OAAO;AAC7E,SAASC,WAAW,EAAEC,SAAS,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQhD,MAAMC,eAAe,gBAAGP,aAAa,CAAkCQ,SAAS,CAAC;AAMjF,OAAO,MAAMC,gBAAiD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjF,MAAM,CAACC,QAAQ,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAS,IAAI,CAAC;EAElD,MAAMa,cAAc,GAAIC,IAAY,IAAK;IACvCF,OAAO,CAACE,IAAI,CAAC;IACbZ,WAAW,CAACY,IAAI,CAAC;EACnB,CAAC;EAED,oBACET,OAAA,CAACC,eAAe,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEL,QAAQ;MAAEE,cAAc;MAAEV;IAAU,CAAE;IAAAM,QAAA,EACtEA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACV,EAAA,CAbWF,gBAAiD;AAAAa,EAAA,GAAjDb,gBAAiD;AAe9D,OAAO,MAAMc,WAAW,GAAGA,CAAA,KAA2B;EAAAC,GAAA;EACpD,MAAMC,OAAO,GAAGvB,UAAU,CAACK,eAAe,CAAC;EAC3C,IAAI,CAACkB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,WAAW;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}